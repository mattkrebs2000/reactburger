{"version":3,"sources":["pages/MakeABurger.js","pages/Burgercontainer.js","pages/Tummy.js","util/API.js","App.js","serviceWorker.js","index.js"],"names":["publicIp","require","MakeABurger","state","entry","changeitfunction","e","_this","setState","target","value","submititfunction","preventDefault","props","Entry","componentDidMount","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","t0","sessionStorage","v4","t1","sent","setItem","call","stop","react_default","createElement","className","onSubmit","this","htmlForm","type","id","name","onChange","Component","Burgercontainer","burgersmade","map","info","_id","onClick","changetoeaten","Tummy","EatenBurgers","delete","API","saveBurger","burgerData","axios","post","deleteBurger","changeBurger","put","getBurgers","get","App","FilteredBurgers","entries","Promise","resolve","reject","setTimeout","then","result","data","console","log","findYourBurgers","inyourtummy","toConsumableArray","filter","eaten","computer","getItem","AddthisEntry","newentry","pages_MakeABurger","pages_Burgercontainer","whatWeHave","pages_Tummy","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02d9ed8d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nconst publicIp = require(\"public-ip\");\n\nclass MakeABurger extends Component {\n                 state = {\n                   entry: \"\",\n                 };\n\n                 changeitfunction = (e) =>\n                   this.setState({ entry: e.target.value });\n\n                 submititfunction = (e) => {\n                   e.preventDefault();\n                   this.props.Entry(this.state.entry);\n                   this.setState({ entry: \"\" });\n                   \n                 };\n\n                 componentDidMount = () => {\n                   (async () => {\n                     sessionStorage.setItem(\"id\", await publicIp.v4());\n                   })();\n                 };\n\n                 render() {\n                   return (\n                     <div>\n                       <form\n                         className=\"create-form\"\n                         onSubmit={this.submititfunction}\n                       >\n                         <div className=\"form-group\">\n                           <label htmlForm=\"newburger\">New Burger:</label>\n                           <input\n                             type=\"text\"\n                             id=\"newburger\"\n                             name=\"burger\"\n                             value={this.state.entry}\n                             onChange={this.changeitfunction}\n                           />\n                         </div>\n                         <button type=\"submit\">Make It!</button>\n                       </form>\n                     </div>\n                   );\n                 }\n               }\n\nexport default MakeABurger;","import React, { Component } from 'react'\n\nclass Burgercontainer extends Component {\n    render() {\n     \n        \n        return (\n          <ul>\n            {this.props.burgersmade && this.props.burgersmade.map((info) => (\n              <li>\n                {info.entry} Burger{\" \"}\n                <button\n                  id={info._id}\n                  onClick={() => this.props.changetoeaten(info._id)}\n                >\n                  Eat it\n                </button>\n              </li>\n            ))}\n          </ul>\n        );\n          \n    }\n  \n}\nexport default Burgercontainer;\n","import React, { Component } from 'react'\n\nclass Tummy extends Component {\n\n    render() {\n        return (\n          <div>\n            <ul>\n              {this.props.EatenBurgers && this.props.EatenBurgers.map((info) => (\n                <li>{info.entry} Burger <button id={info._id} onClick={()=>this.props.delete(info._id)}>\n                    Poop it!\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        );\n    }\n}\nexport default Tummy; \n","import axios from \"axios\";\n\nexport default {\n  // Saves a user to the database\n  saveBurger: function (burgerData) {\n    return axios.post(\"/api/burgers\", burgerData);\n  },\n\n  deleteBurger: function (id, burgerData) {\n    return axios.delete(\"/api/burgers/\" + id, burgerData);\n  },\n\n  changeBurger: function (id, burgerData) {\n    return axios.put(\"/api/burgers/\" + id, burgerData);\n  },\n\n  getBurgers: function () {\n    return axios.get(\"/api/burgers\");\n  },\n};\n\n\n \n","import React, { Component } from \"react\";\nimport MakeABurger from \"./pages/MakeABurger.js\";\nimport Burgercontainer from \"./pages/Burgercontainer.js\";\nimport Tummy from \"./pages/Tummy.js\";\nimport \"./App.css\";\nimport { v4 as uuid } from \"uuid\";\nimport API from \"./util/API\";\n\nclass App extends Component {\n  state = {\n    FilteredBurgers: [],\n    EatenBurgers: [],\n\n    entries: [],\n  };\n\n  // componentDidMount = () => {\n  //   API.getBurgers()\n  //   .then((res) => this.setState({entries:res.data}),\n\n  //   this.findYourBurgers(),\n  //   this.inyourtummy()\n  //   )\n  // };\n\n  componentDidMount = () => {\n    let p = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(API.getBurgers());\n      }, 1);\n    });\n\n    p.then((result) => {\n      this.setState({ entries: result.data });\n      console.log(\"hi \", this.state.entries);\n      return result;\n    })\n      .then((result) => {\n        this.findYourBurgers();\n        console.log(\"What is the result\", result);\n        return result;\n      })\n      .then((result) => {\n        this.inyourtummy();\n        console.log(result);\n        return result;\n      });\n  };\n\n  findYourBurgers = () => {\n    this.setState({\n      FilteredBurgers: [\n        ...this.state.entries.filter(\n          (data) =>\n            !data.eaten && data.computer === sessionStorage.getItem(\"id\")\n        ),\n      ],\n    });\n  };\n\n  inyourtummy = () => {\n    this.setState({\n      EatenBurgers: [\n        ...this.state.entries.filter(\n          (data) => data.eaten && data.computer === sessionStorage.getItem(\"id\")\n        ),\n      ],\n    });\n  };\n\n  changetoeaten = (id) => {\n    console.log(\"This is the id...\", id);\n    API.changeBurger(id);\n    this.setState(\n      {\n        entries: this.state.entries.map((data) => {\n          if (data._id === id) {\n            data.eaten = true;\n          }\n          console.log(data.eaten);\n          return data;\n        }),\n      },\n      this.inyourtummy(),\n      this.findYourBurgers()\n    );\n  };\n\n  delete = (id) => {\n    API.deleteBurger(id);\n      this.findYourBurgers();\n  this.setState(\n    {\n      entries: [...this.state.entries.filter((data) => data._id !== id)],\n\n      EatenBurgers: [\n        ...this.state.EatenBurgers.filter((data) => data._id !== id)\n      ],\n    },\n    this.inyourtummy(),\n    this.findYourBurgers()\n  );\n   \n  };\n\n \n\n  AddthisEntry = (entry) => {\n    const newentry = {\n      entry,\n      eaten: false,\n      computer: sessionStorage.getItem(\"id\"),\n    };\n\n    API.saveBurger(newentry)\n      .then(() => {\n        API.getBurgers()\n      \n      .then((result) => {\n        this.setState({ entries: result.data });\n      })\n      .then(() => {\n        console.log(this.state.entries);\n        this.findYourBurgers();\n      })\n      .then(() => {\n        this.setState(\n          {\n            FilteredBurgers: [...this.state.FilteredBurgers],\n          },\n          this.inyourtummy(),\n          this.findYourBurgers()\n        );\n      });\n  });\n};\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container2\">\n          <div>\n            <div>\n              <div className=\"jumbojumbotron\">\n                <div className=\"title\">Eat the Burger</div>\n                <div className=\"row img-responsive\"></div>\n                <div className=\"subtitle\">Make Burgers, Eat Burgers.</div>\n              </div>\n            </div>\n            <br />\n            <h1>Burgers Made</h1>\n            <MakeABurger Entry={this.AddthisEntry} />\n          </div>\n\n          <div>\n            <div>\n              <ul>\n                <Burgercontainer\n                  burgersmade={this.state.FilteredBurgers}\n                  whatWeHave={this.state.entries}\n                  changetoeaten={this.changetoeaten}\n                />\n              </ul>\n            </div>\n          </div>\n\n          <div>\n            <div>\n              <h1>Burgers Eaten</h1>\n              <ul>\n                {\" \"}\n                <ul>\n                  <Tummy\n                    EatenBurgers={this.state.EatenBurgers}\n                    delete={this.delete}\n                  />\n                </ul>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}