{"ast":null,"code":"var db = require(\"../models\");\n\nmodule.exports = {\n  findAll: function findAll(req, res) {\n    db.burgers.find().then(function (dbModel) {\n      console.log(\"YOU ARE working\");\n      console.log(dbModel);\n      res.json(dbModel);\n    });\n  },\n  editOne: function editOne(req, res) {\n    console.log(\"Edit is working . . . \", req.body);\n    db.burgers.findOneAndUpdate({\n      _id: req.params.id\n    }, {\n      $set: {\n        eaten: true\n      }\n    }, {\n      new: true\n    }, function (err, doc) {}).then(function (dbUser) {\n      console.log(\"Changed to\");\n      res.json(dbUser);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  },\n  deleteOne: function deleteOne(req, res) {\n    console.log(\"delete is working\");\n    console.log(res);\n    db.burgers.findOneAndRemove({\n      _id: req.params.id\n    }, function (err, doc) {}).then(function (dbUser) {\n      console.log(\"Changed to\");\n      res.json(dbUser);\n    }).catch(function (err) {\n      return res.status(422).json(err);\n    });\n  },\n  createOne: function createOne(req, res) {\n    console.log(\"Creating user . . . \");\n    var burger = req.body;\n    burger.entry = req.body.entry;\n    burger.eaten = req.body.eaten;\n    burger.computer = req.body.computer;\n    db.burgers.create(burger).then(function (dbModel) {\n      console.log(dbModel);\n      res.json(dbModel);\n    }).catch(function (err) {\n      console.log(err);\n      res.status(422).json(err);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/matt/Desktop/HTML-JS/BootCampWork/reactburger/controllers/burgerController.js"],"names":["db","require","module","exports","findAll","req","res","burgers","find","then","dbModel","console","log","json","editOne","body","findOneAndUpdate","_id","params","id","$set","eaten","new","err","doc","dbUser","catch","status","deleteOne","findOneAndRemove","createOne","burger","entry","computer","create"],"mappings":"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","sourcesContent":["const db = require(\"../models\");\n\nmodule.exports = {\n  findAll: function (req, res) {\n    db.burgers.find().then((dbModel) => {\n      console.log(\"YOU ARE working\");\n\n      // console.log(res);\n      console.log(dbModel);\n      res.json(dbModel);\n    });\n  },\n\n  editOne: function (req, res) {\n    console.log(\"Edit is working . . . \",req.body);\n    db.burgers\n      .findOneAndUpdate(\n        { _id: req.params.id },\n        { $set: { eaten: true } },\n        { new: true },\n        function (err, doc) {}\n      )\n      .then((dbUser) => {\n        console.log(\"Changed to\");\n        res.json(dbUser);\n      })\n      .catch((err) => res.status(422).json(err));\n  },\n \n\n  deleteOne: function (req, res) {\n    console.log(\"delete is working\");\n    console.log(res);\n       db.burgers\n         .findOneAndRemove(\n           { _id: req.params.id },\n           function (err, doc) {}\n         )\n         .then((dbUser) => {\n           console.log(\"Changed to\");\n           res.json(dbUser);\n         })\n         .catch((err) => res.status(422).json(err));\n  },\n\n  createOne: function (req, res) {\n    console.log(\"Creating user . . . \");\n    let burger = req.body;\n    burger.entry = req.body.entry;\n    burger.eaten = req.body.eaten;\n    burger.computer = req.body.computer;\n    db.burgers\n      .create(burger)\n      .then((dbModel) => {\n        // console.log(getSession(dbModel));\n        // res.json(getSession(dbModel));\n\n        console.log(dbModel);\n        res.json(dbModel);\n      })\n      .catch((err) => {\n        console.log(err);\n        res.status(422).json(err);\n      });\n  },\n};\n\n"]},"metadata":{},"sourceType":"script"}